
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьНайденныеАктыСверки();
	//@skip-check use-non-recommended-method
	Сообщить("Привет как дела?!!!!");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНайденныеАктыСверки(ВыбСтрока = Неопределено)
	
	Если ВыбСтрока = Неопределено Тогда
	
		НужныеКонтрагенты = СписокОтправки.Выгрузить().ВыгрузитьКолонку("Контрагент");
		
	Иначе
		
		НужныеКонтрагенты = Новый Массив;
		ТекСтрока = СписокОтправки.НайтиПоИдентификатору(ВыбСтрока);
		НужныеКонтрагенты.Добавить(ТекСтрока.Контрагент);
			
	КонецЕсли;                                          
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	АктСверкиВзаиморасчетов.Ссылка КАК Ссылка,
	|	АктСверкиВзаиморасчетов.Контрагент КАК Контрагент
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов КАК АктСверкиВзаиморасчетов
	|ГДЕ
	|	АктСверкиВзаиморасчетов.Контрагент В(&НужныеКонтрагенты)
	|	И АктСверкиВзаиморасчетов.Проведен
	|	И НАЧАЛОПЕРИОДА(АктСверкиВзаиморасчетов.ДатаНачала, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ДатаНачала, ДЕНЬ)
	|	И НАЧАЛОПЕРИОДА(АктСверкиВзаиморасчетов.ДатаОкончания, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ДатаОкончания, ДЕНЬ)
	|	И АктСверкиВзаиморасчетов.Организация = &Организация";
	
	Запрос.УстановитьПараметр("НужныеКонтрагенты", НужныеКонтрагенты);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаНачала", ПериодОтчетов.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ПериодОтчетов.ДатаОкончания);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		Найденные = СписокОтправки.НайтиСтроки(Новый Структура("Контрагент", Выборка.Контрагент));
		
		Если Найденные.Количество() > 0 Тогда
			
			Найденные[0].АктСверки = Выборка.Ссылка;
			
		КонецЕсли;
	
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОтправкиКонтрагентПриИзменении(Элемент)
	
	ОбновитьНайденныеАктыСверки(Элементы.СписокОтправки.ТекущаяСтрока);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьАктСверкиНаСервере(ВыбСтрока)
		
	ТекСтрока = СписокОтправки.НайтиПоИдентификатору(ВыбСтрока);   
	
	Если НЕ ЗначениеЗаполнено(ТекСтрока.Контрагент) ИЛИ ЗначениеЗаполнено(ТекСтрока.АктСверки) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НовыйАкт = Документы.АктСверкиВзаиморасчетов.СоздатьДокумент();
	НовыйАкт.Дата = ТекущаяДата();
	НовыйАкт.ДатаНачала = ПериодОтчетов.ДатаНачала;
	НовыйАкт.ДатаОкончания = КонецДня(ПериодОтчетов.ДатаОкончания);
	НовыйАкт.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
	НовыйАкт.Комментарий = "#СозданАвтоматическиОбработкой";
	НовыйАкт.Контрагент = ТекСтрока.Контрагент;
	НовыйАкт.Организация = Организация;
	НовыйАкт.Ответственный = ПараметрыСеанса.ТекущийПользователь;     
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Контрагент", ТекСтрока.Контрагент);
	ДанныеЗаполнения.Вставить("Организация", Организация);
	ДанныеЗаполнения.Вставить("ДатаНачала", ПериодОтчетов.ДатаНачала);
	ДанныеЗаполнения.Вставить("ДатаОкончания", Конецдня(ПериодОтчетов.ДатаОкончания));    
	
	ТаблицаСчетов = УчетВзаиморасчетов.ПолучитьТаблицуСчетовУчетаВзаиморасчетов(Истина, Ложь);	
	СчетаУчетаРасчетов = ТаблицаСчетов.ВыгрузитьКолонку("СчетРасчетов");
	ДанныеЗаполнения.Вставить("СчетаУчетаРасчетов", СчетаУчетаРасчетов);
	
	НовыйАкт.Заполнить(ДанныеЗаполнения);
	
	НовыйАкт.Записать(РежимЗаписиДокумента.Проведение);
	
	ТекСтрока.АктСверки = НовыйАкт.Ссылка;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьАктСверки(Команда)
	СформироватьАктСверкиНаСервере(Элементы.СписокОтправки.ТекущаяСтрока);
КонецПроцедуры

